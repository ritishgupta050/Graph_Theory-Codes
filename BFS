#includ<bits/stdc++.h>
using namespace std;

class Graph
{
  int V;
  list<int> *adj;

public:

    Graph (int V);

    void addEdge(int v,int w);

    void bfs(int v);
};

Graph::Graph(int V)
{
  this->V = V;
  adj = new list<int> [V];
}

void Graph :: addEdge(int v,int w)
{
  adj[v].push_back(w);
}

void Graph::bfs(int v)
{
  int *visited = new int[V];
  for(int i=0;i<V;i++)
    visited[i] = 0;

  list<int> q;
  visited[v] = 1;
  q.push_back(v);

  list<int> :: iterator it;
  while(!q.empty())
  {
    v = q.front();
    cout<<v<<" ";
    q.pop_front();

    for(it = adj[v].begin();it!=adj[v].end();it++)
    {
      if(!visited[*it])
      {
        visited[*it] = 1;
        q.push_back(*it);
      }
    }
  }
}

int main()
{
  Graph g(4);

  g.addEdge(0, 1);
  g.addEdge(0, 2);
  g.addEdge(1, 2);
  g.addEdge(2, 0);
  g.addEdge(2, 3);
  g.addEdge(3, 3);

  g.bfs(2);
}
