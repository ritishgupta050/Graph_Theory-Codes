#include<bits/stdc++.h>
using namespace std;

void bfs(int s,vector<vector<int> >graph,int N)
{
    queue<int> q;
    q.push(s);

    vector<int> distance(N,-1);
    vector<int> visited(N,0);

    visited[s] = 1;
    distance[s] = false;

    while(!q.empty())
    {
        auto node = q.front();
        q.pop();

        for(auto it = graph[node].begin(); it!=graph[node].end(); it++)
        {
            if(!visited[*it])
            {
                distance[*it] = distance[node] + 1;
                q.push(*it);
                visited[*it] = true;
            }
        }
    }
    for(int i = 0; i<N; i++)
    {
        if(visited[i] == false)
            cout<<-1<<" ";
        else if(distance[i]>0)
            cout<<distance[i]*6<<" ";
    }
    cout<<endl;
}

int main()
{
    int t;
    cin>>t;

    while(t--)
    {
        int N,M;
        cin>>N>>M;

        vector<vector<int> >a(N);

        for(int i=0;i<M;i++)
        {
            int n,m;
            cin>>n>>m;
            --n; --m;

            a[n].push_back(m);
            a[m].push_back(n);
        }
        int s;
        cin>>s;
        --s;

        bfs(s,a,N);
    }
}
