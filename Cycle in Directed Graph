#include<bits/stdc++.h>
using namespace std;

class Graph
{
    int V;
    list<int> *adj;
    bool cyclic(int v,bool visited[],bool *rs);

public:
    Graph(int V);

    void addEdge(int v,int w);

    bool iscyclic();
};

Graph::Graph(int V)
{
    this->V = V;
    adj = new list<int>[V];
}

void Graph::addEdge(int v,int w)
{
    adj[v].push_back(w);
}

bool Graph::cyclic(int v,bool visited[],bool *recst)
{
    if(visited[v] == false)
    {
        visited[v] = true;
        recst[v] = true;

        list<int>::iterator it;
        for(it=adj[v].begin();it!=adj[v].end();it++)
        {
            if(!visited[*it] && cyclic(*it,visited,recst))
                return true;
            else if(recst[*it])
                return true;
        }
    }
recst[v] = false;
return false;
}

bool Graph::iscyclic()
{
    bool *recst = new bool[V];
    bool *visited = new bool[V];
    for(int i=0;i<V;i++)
    {
        visited[i] = false;
        recst[i] = false;
    }

    for(int u=0;u<V;u++)
    {
        if(cyclic(u,visited,recst))
            return true;
    }
    return false;
}

int main()
{
    Graph g(5);

    g.addEdge(0, 1);
    g.addEdge(1, 2);
    //g.addEdge(2, 0);
    g.addEdge(3, 4);

    g.iscyclic()?cout<<"Graph is cyclic":cout<<"Graph is not cyclic";
}
